// <auto-generated/>
namespace FunctionalPrograms
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Diagnostics;
    using System.Threading;

    /// <summary>
    /// This is the Utility class for Functional programs
    /// </summary>
    class Utility
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="StringsCount"></param>
        //Anagram Utility
        public void StoringToArray(int StringsCount)
        {
            //This string array for storing strings
            String[] StringArray = new String[StringsCount];
            //this is the duplicate array to show the string while displaying
            String[] TempStringArray = new string[StringsCount];
            //This line asks for entering the StringsCount Arrays
            Console.WriteLine("Enter {0} a string and press enter key after every String", StringsCount);
            //it stores the strings in array
            for (int i = 0; i < StringsCount; i++)
            {
                StringArray[i] = Console.ReadLine();
                TempStringArray[i] = StringArray[i];
            }

            Console.WriteLine("Your Strings Anagrams List below");
            //In this block all the strings are in sorted order
            for (int i = 0; i < StringsCount; i++)
            {
                String TempString = StringArray[i];
                //converting to character array
                char[] CharectorArray = TempString.ToCharArray();
                //sort a char array
                Array.Sort(CharectorArray);
                //store back to string position
                StringArray[i] = new string(CharectorArray);
            }
            //this compares the strimgs and if matches then display the position and anagram values
            for (int i = 0; i < StringsCount - 1; i++)
            {
                for (int j = i + 1; j < StringsCount; j++)
                {
                    if (StringArray[i].Equals(StringArray[j]))
                    {
                        Console.WriteLine("{0}th value {1} have a {2} anagram at {3}th position", i + 1, TempStringArray[i], TempStringArray[j], j + 1);
                    }
                }
            }
        }

        //Integer check if given input is integer it gives the number else
        //it returns -1
        public int IntInput()
        {
            bool Success = Int32.TryParse(Console.ReadLine(), out int Number);
            if (Success)
            {
                return Number;
            }
            else
            {
                Console.WriteLine("you entered non integer value");
                return -1;
            }
        }

        //FlipCoin Utility
        public float FlipCoinUtility(int Value)
        {
            //tails and heads counts are zero initially
            float TailsCount = 0;
            float HeadsCount = 0;
            for (int i = 0; i < Value; i++)
            {
                Random random = new Random();
                //Randomly generate a value between 0.0 to 1.0
                //if random value is below 0.5 it increases tails count else heads
                if ((float)random.Next(10) / 10 > 0.5)
                {
                    TailsCount++;
                }
                else
                {
                    HeadsCount++;
                }
            }
            Console.WriteLine("tails count is " + TailsCount);
            Console.WriteLine("heads count is " + HeadsCount);
            //Heads vs Tails percentage
            float ans = ((HeadsCount / TailsCount) * 100);
            return ans;
        }

        //Leap Year utility
        public bool IsLeapYear(int YearIs)
        {
            //remainder is zero it returns zero but it the yera is multiples of 100
            // and that should satisfy for year % 400 is 0
            if (YearIs % 4 == 0)
            {
                if (YearIs % 100 == 0)
                {
                    if (YearIs % 400 == 0)
                    {
                        return true;
                    }
                    return false;
                }
                    return true;
            }
            else
            {
                return false;
            }
        }

        //This is for checking given number is 4 digit or not
        public bool IsFourDigit(int Number)
        {
            if (Number > 999 && Number < 10000)
            {
                return true;
            }
            else
                return false;
        }

        //Hormonic Number Utility
        //Hormonic Number Utility
        public float HormonicUtility(int Num)
        {
            float Ans = 0F;
            float Temp;
            for (int i = 1; i <= Num; i++)
            {
                Temp = i;
                Ans += (1 / Temp);
            }
            return Ans;
        }

        //Utility for Finding Factors
        public void FactrosUtility(int Number)
        {
            int Count=0;
            //it checks the factors for a give number is any factors available between
            //(2 to Number/2)
            for (int i = 2; i <= Number / 2; i++)
            {
                if (Number % i == 0)
                {
                    Console.WriteLine(i);
                    Count++;
                }
            }
            if (Count == 0)
            {
                Console.WriteLine("No Factors are available for {0}",Number);
            }
        }

        //Two D Array Utility
        public void TwoDArrayUtility(int m, int n)
        {
            //a[][] is a two dimensional array
            int[,] a = new int[m, n];
            //stores the m X n elements
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.WriteLine("Enter " + i + "th row " + j + "th column value");
                    a[i, j] = Int32.Parse(Console.ReadLine());
                }
            }
            //print it Here
            Console.WriteLine("Your 2D array is");
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(a[i, j] + "  ");
                }
                Console.WriteLine();
            }
        }


    }
}
