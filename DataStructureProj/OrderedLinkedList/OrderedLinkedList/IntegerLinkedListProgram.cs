//<auto-generated/>
namespace OrderedLinkedList
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    /// <summary>
    /// Linked List for integer
    /// </summary>
    public class IntegerLinkedListProgram
    {
        Node head;
        public IntegerLinkedListProgram OrderedList()
        {
            //Node CurrentNode = head;
            return null;
        }

        //Adding the data
        public void add(int Data)
        {
            Sort(Data);
        }

        //remove the data from list
        public void remove(int Data)
        {
            Node Current = head;
            while (Current.Next != null)
            {
                if (head == null)
                    return;
                if (Current.Data == Data)
                {
                    head = Current.Next;
                    remove(Data);
                }
                //After checking first node we have to check one step forward to data it will be easy to remove
                if (Current.Next.Data == Data)
                {
                    Current.Next = Current.Next.Next;
                    return;
                }
                Current = Current.Next;
            }
        }

        //searching Element in linked list
        public bool Search(int Data)
        {
            Node CurrentNode = head;
            while (CurrentNode.Next != null)
            {
                if (CurrentNode.Data == Data)
                {
                    return true;
                }
                CurrentNode = CurrentNode.Next;
            }
            if (CurrentNode.Data == Data)
            {
                return true;
            }
            return false;
        }

        //this gives how many values present in list
        public int Size()
        {
            Node CurrentNode = head;
            int Length = 0;
            while (CurrentNode.Next != null)
            {
                Length++;
                CurrentNode = CurrentNode.Next;
            }
            Length++;
            return Length;
        }

        //gives the index of given value
        public string Index(int Data)
        {
            Node CurrentNode = head;
            int count = 0;
            while (CurrentNode.Data != Data && CurrentNode.Next != null)
            {
                CurrentNode = CurrentNode.Next;
                count++;
            }
            if (CurrentNode.Data != Data && CurrentNode.Next == null)
            {
                return "Given input not available in list";
            }
            return count.ToString();
        }

        //This is pop operation for linked list
        public int pop()
        {
            //if the list is empty then it sends -1
            if (IsEmpty())
            {
                return -1;
            }
            Node CurrentNode = head;
            int Ans;
            while (CurrentNode.Next.Next != null)
            {
                CurrentNode = CurrentNode.Next;
            }
            Ans = CurrentNode.Next.Data;
            CurrentNode.Next = null;
            return Ans;
        }

        //This is pop position 
        public int pop(int Position)
        {
            Node CurrentNode = head;
            int Ans;
            if (Position >= Size() || Position < 0)
            {
                return -1;
            }
            //if the position is 0 then simply make head as CurrentNode.next
            if (Position == 0)
            {
                head = CurrentNode.Next;
                Ans = CurrentNode.Data;
                return Ans;
            }
            //else repeat the forward till before the position then return the value as well make current.next as 
            //Current.next.next
            while (Position > 1)
            {
                CurrentNode = CurrentNode.Next;
                Position--;
            }
            Ans = CurrentNode.Next.Data;
            CurrentNode.Next = CurrentNode.Next.Next;
            return Ans;
        }

        //This is the sorted program
        void Sort(int Data)
        {
            Node CurrentNode = head;
            Node TempNode = new Node(Data);
            //if the head is null then first data only head
            if (head == null)
            {
                head = new Node(Data);
                return;
            }
            else
            {
                //if first data only greater then given data then just changing the head position to given data
                if (CurrentNode.Data > Data)
                {
                    TempNode.Next = CurrentNode;
                    head = TempNode;
                    return;
                }
                //else this checks for the remaining palces contains thw number
                else
                {
                    while (CurrentNode.Next != null)
                    {
                        if (CurrentNode.Next.Data > Data)
                        {
                            TempNode.Next = CurrentNode.Next;
                            CurrentNode.Next = TempNode;
                            return;
                        }
                        CurrentNode = CurrentNode.Next;
                    }
                    if (CurrentNode.Data > Data)
                    {
                        TempNode.Next = CurrentNode.Next;
                        CurrentNode.Next = TempNode;
                        return;
                    }
                    CurrentNode.Next = new Node(Data);

                }
            }
        }

        //this gives the value at the perticular index
        public int ValueAt(int Position)
        {
            Node CurrentNode = head;
            int Count = Position;
            int Ans;
            while (Count > 0)
            {
                CurrentNode = CurrentNode.Next;
                Count--;
            }
            Ans = CurrentNode.Data;
            return Ans;
        }

        //if the head is null then it returns true
        public bool IsEmpty()
        {
            if (head == null)
            {
                return true;
            }
            return false;
        }

        //it display all the data present in list
        public void Display()
        {
            if (IsEmpty())
            {
                return;
            }
            Node CurrentNode = head;
            while (CurrentNode.Next != null)
            {
                Console.WriteLine(CurrentNode.Data);
                CurrentNode = CurrentNode.Next;
            }
            Console.WriteLine(CurrentNode.Data);
        }
    }
}
