//<auto-generated/>
namespace OrderedLinkedList
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    /// <summary>
    /// This is the utility class
    /// </summary>
    class Utility
    {
        public void PrimeNumberUtility()
        {
            //Range as 1000 and 10 linked lists are needed
            int Range = 1000;
            int Dimensions = Range / 100;
            int j;
            int Flag = 0;
            //create linked list and initialized here
            IntegerLinkedListProgram[] OrderedListUTL = new IntegerLinkedListProgram[Dimensions];
            for (int i = 0; i < Dimensions; i++)
            {
                OrderedListUTL[i] = new IntegerLinkedListProgram();
            }
            //this loop checks all the numbers between 3 to 1000 weather prime or not
            OrderedListUTL[0].add(2);
            OrderedListUTL[0].add(3);
            for (int i = 2; i < Range; i++)
            {
                Flag = 0;
                for(j = 2; j <= i / 2; j++)
                {
                    if ( i % j == 0)
                    {
                        Flag = 0;
                        break;
                    }
                    else
                    {
                        Flag = 1;
                    }
                }
                //if the number is prime number then it saves in perticular link
                if(Flag == 1)
                {
                    if (i<=100)
                    {
                        OrderedListUTL[0].add(i);
                    }
                    if (i <= 200 && i>100)
                    {
                        OrderedListUTL[1].add(i);
                    }
                    if (i <= 300 && i > 200)
                    {
                        OrderedListUTL[2].add(i);
                    }
                    if (i <= 400 && i > 300)
                    {
                        OrderedListUTL[3].add(i);
                    }
                    if (i <= 500 && i > 400)
                    {
                        OrderedListUTL[4].add(i);
                    }
                    if (i <= 600 && i > 500)
                    {
                        OrderedListUTL[5].add(i);
                    }
                    if (i <= 700 && i > 600)
                    {
                        OrderedListUTL[6].add(i);
                    }
                    if (i <= 800 && i > 700)
                    {
                        OrderedListUTL[7].add(i);
                    }
                    if (i <= 900 && i > 800)
                    {
                        OrderedListUTL[8].add(i);
                    }
                    if (i > 900)
                    {
                        OrderedListUTL[9].add(i);
                    }
                }
            }
            //Display the Prime numbers present in all linked lists
            for (int i = 0; i < Dimensions; i++)
            {
                Console.Write("{0} to {1} :", i * 100, (i + 1) * 100);
                OrderedListUTL[i].DisplayLine();
                Console.WriteLine();
            }
        }

        public void OnlyPrimeOnlyAnagramList()
        {
            //Full prime list is a list to store all the prime numbers within it
            IntegerLinkedListProgram FullPrimeList = new IntegerLinkedListProgram();
            //Non Anagram prime list is used to store the Non prime numbers
            IntegerLinkedListProgram NonAnagramPrimeList = new IntegerLinkedListProgram();
            //Anagram List is used to store the only anagram numbers
            IntegerLinkedListProgram AnagramsList = new IntegerLinkedListProgram();
            //2 and 3 are prime numbers and adde to list
            FullPrimeList.add(2);
            FullPrimeList.add(3);
            int Flag;
            int j;
            //This is the prime number findin loop
            for (int i = 2; i < 1000; i++)
            {
                Flag = 0;
                for (j = 2; j <= i / 2; j++)
                {
                    if (i % j == 0)
                    {
                        Flag = 0;
                        break;
                    }
                    else
                    {
                        Flag = 1;
                    }
                }
                //if the number is prime number then it saves in perticular link
                if (Flag == 1)
                {
                    FullPrimeList.add(i);
                }
            }
            int size = FullPrimeList.Size();
            //NonAnagramPrimeList = FullPrimeList;
            for (int i = 0; i < size; i++)
            {
                //Here is used to if anagrams find in the list then remove the ith position data
                //Now new data available here to check that also we use Label
Here:           string TempString1 = Convert.ToString(FullPrimeList.ValueAt(i));
                char[] CharArray1 = TempString1.ToCharArray();
                Array.Sort(CharArray1);
                TempString1 = new string(CharArray1);
                //Compare ith data with remaining all data within the list
                for (int k = i + 1; k < size - 1; k++)
                {
                    string TempString2 = Convert.ToString(FullPrimeList.ValueAt(k));
                    char[] CharArray2 = TempString2.ToCharArray();
                    Array.Sort(CharArray2);
                    TempString2 = new string(CharArray2);
                    //if both are anagram then stored to anagram list and remove from all the prime number list
                    if (TempString1.Equals(TempString2))
                    {
                        //if value is anagram then push it to Anagram list
                        AnagramsList.add(FullPrimeList.ValueAt(i));
                        //after removing ith data present list index varies so need to save kth item to temporarily
                        int ValueAK = FullPrimeList.ValueAt(k);
                        //then remove both the values
                        FullPrimeList.remove(FullPrimeList.ValueAt(i));
                        FullPrimeList.remove(ValueAK);
                        //Now size is changed to current value
                        size = FullPrimeList.Size();
                        //Goto Here without incrementing i value
                        goto Here;
                    }
                }
            }
            Console.WriteLine("Anagram List....................................................");
            AnagramsList.Display();
            Console.WriteLine("Only Primr List....................................................");
            FullPrimeList.Display();
        }

        //this is program for reversing prime array using stack
        public void ReversePrimeListUsingStack()
        {
            IntegerLinkedListProgram FullPrimeList = new IntegerLinkedListProgram();
            UserStack StackUtility = new UserStack();
            FullPrimeList.add(2);
            FullPrimeList.add(3);
            int Flag;
            int j;
            //This is the prime number findin loop
            for (int i = 2; i < 1000; i++)
            {
                Flag = 0;
                for (j = 2; j <= i / 2; j++)
                {
                    if (i % j == 0)
                    {
                        Flag = 0;
                        break;
                    }
                    else
                    {
                        Flag = 1;
                    }
                }
                //if the number is prime number then it saves in perticular link
                if (Flag == 1)
                {
                    FullPrimeList.add(i);
                }
            }
            int size = FullPrimeList.Size();
                //NonAnagramPrimeList = FullPrimeList;
            for (int i = 0; i < size; i++)
            {
                //Here is used to if anagrams find in the list then remove the ith position data
                //Now new data available here to check that also we use Label
 Here:          string TempString1 = Convert.ToString(FullPrimeList.ValueAt(i));
                char[] CharArray1 = TempString1.ToCharArray();
                Array.Sort(CharArray1);
                TempString1 = new string(CharArray1);
                //Compare ith data with remaining all data within the list
                for (int k = i + 1; k < size - 1; k++)
                {
                    string TempString2 = Convert.ToString(FullPrimeList.ValueAt(k));
                    char[] CharArray2 = TempString2.ToCharArray();
                    Array.Sort(CharArray2);
                    TempString2 = new string(CharArray2);
                    //if both are anagram then stored to anagram list and remove from all the prime number list
                    if (TempString1.Equals(TempString2))
                    {
                        //if it is anagram then push to stack
                        StackUtility.push(FullPrimeList.ValueAt(i));
                        //after removing ith data present list index varies so need to save kth item to temporarily
                        int ValueAK = FullPrimeList.ValueAt(k);
                        //then remove both the values
                        FullPrimeList.remove(FullPrimeList.ValueAt(i));
                        FullPrimeList.remove(ValueAK);
                        //Now size is changed to current value
                        size = FullPrimeList.Size();
                        //Goto Here without incrementing i value
                        goto Here;
                    }
                }
            }
            //displaying data in reverse order by pop from stack(LIFO)
            while (StackUtility.IsEmptyStack() != true)
            {
                Console.WriteLine(StackUtility.pop());
            }
        }

        public void PrimeAnagramListUsingQueue()
        {
            IntegerLinkedListProgram FullPrimeList = new IntegerLinkedListProgram();
            UserQueue QueueUtility = new UserQueue();
            FullPrimeList.add(2);
            FullPrimeList.add(3);
            int Flag;
            int j;
            //This is the prime number findin loop
            for (int i = 2; i < 1000; i++)
            {
                Flag = 0;
                for (j = 2; j <= i / 2; j++)
                {
                    if (i % j == 0)
                    {
                        Flag = 0;
                        break;
                    }
                    else
                    {
                        Flag = 1;
                    }
                }
                //if the number is prime number then it saves in perticular link
                if (Flag == 1)
                {
                    FullPrimeList.add(i);
                }
            }
            int size = FullPrimeList.Size();
            //NonAnagramPrimeList = FullPrimeList;
            for (int i = 0; i < size; i++)
            {
                //Here is used to if anagrams find in the list then remove the ith position data
                //Now new data available here to check that also we use Label
Here:           string TempString1 = Convert.ToString(FullPrimeList.ValueAt(i));
                char[] CharArray1 = TempString1.ToCharArray();
                Array.Sort(CharArray1);
                TempString1 = new string(CharArray1);
                //Compare ith data with remaining all data within the list
                for (int k = i + 1; k < size - 1; k++)
                {
                    string TempString2 = Convert.ToString(FullPrimeList.ValueAt(k));
                    char[] CharArray2 = TempString2.ToCharArray();
                    Array.Sort(CharArray2);
                    TempString2 = new string(CharArray2);
                    //if both are anagram then stored to anagram list and remove from all the prime number list
                    if (TempString1.Equals(TempString2))
                    {
                        //if it is anagram then add to queue
                        QueueUtility.Enqueue(FullPrimeList.ValueAt(i));
                        //after removing ith data present list index varies so need to save kth item to temporarily
                        int ValueAK = FullPrimeList.ValueAt(k);
                        //then remove both the values
                        FullPrimeList.remove(FullPrimeList.ValueAt(i));
                        FullPrimeList.remove(ValueAK);
                        //Now size is changed to current value
                        size = FullPrimeList.Size();
                        //Goto Here without incrementing i value
                        goto Here;
                    }
                }
            }
            //displaying data using dequeue (FIFO)
            while (QueueUtility.IsEmptyQueue() != true)
            {
                Console.WriteLine(QueueUtility.Dequeue());
            }
        }
    }
}
