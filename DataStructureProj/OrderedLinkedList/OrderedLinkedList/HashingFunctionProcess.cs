//<auto-generated/>
namespace OrderedLinkedList
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.IO;

    /// <summary>
    /// This is the Hashing function program
    /// </summary>
    class HashingFunctionProcess
    {
        public static void HashingProcess()
        {
            //declaring array of ordered lists here
            IntegerLinkedListProgram[] OrderedLList = new IntegerLinkedListProgram[11];
            OrderedLList[0] = new IntegerLinkedListProgram();
            OrderedLList[1] = new IntegerLinkedListProgram();
            OrderedLList[2] = new IntegerLinkedListProgram();
            OrderedLList[3] = new IntegerLinkedListProgram();
            OrderedLList[4] = new IntegerLinkedListProgram();
            OrderedLList[5] = new IntegerLinkedListProgram();
            OrderedLList[6] = new IntegerLinkedListProgram();
            OrderedLList[7] = new IntegerLinkedListProgram();
            OrderedLList[8] = new IntegerLinkedListProgram();
            OrderedLList[9] = new IntegerLinkedListProgram();
            OrderedLList[10] = new IntegerLinkedListProgram();
            //Saving to the file Utility object is created
            SavingToFileProgram SavingToFileUTL = new SavingToFileProgram();
            //path for file
            string FilePath = @"C:\Users\bridgelabz\source\repos\OrderedLinkedList\OrderedLinkedList\bin\Debug\netcoreapp3.1\HashFunctionFile.txt";
 Home:      Console.WriteLine("1 for Storing\n2 for display of given index\n3 for Store to file\n4 For seraching a number" +
                " first Store (3) then proceed\n5 for exit from here");
            try
            {
                int Selection = int.Parse(Console.ReadLine());
                switch (Selection)
                {
                    //Case 1 then it will checks the remainder and add it to corresponding list
                    case 1:
                        Console.WriteLine("Enter your Number");
                        int Number = int.Parse(Console.ReadLine());
                        OrderedLList[Number % 11].add(Number);
                        goto Home;
                        //display the data present in the linked list
                    case 2:
                        int HashKey = int.Parse(Console.ReadLine());
                        OrderedLList[HashKey].Display();
                        goto Home;
                        //Saves the file and terminate the program
                    case 3:
                        for ( int i=0; i < 11; i++)
                        {
                            //if list is empty and stores null
                            string[] StringArray;
                            if (OrderedLList[i].IsEmpty())
                            {
                                StringArray = new string[1];
                                StringArray[0] = "None";
                            }
                            //else stores all the data in lists
                            else
                            {
                                StringArray = new string[OrderedLList[i].Size()];
                                for (int j = 0; j < StringArray.Length; j++)
                                {
                                    StringArray[j] += Convert.ToString(OrderedLList[i].ValueAt(j));
                                }
                            }
                            //Calling the Save to file method and store it into file
                            SavingToFileUTL.SaveToFile(FilePath, StringArray);
                        }
                        goto Home;
                        //Searching the table for perticular HashKey list
                    case 4:
                        {
                            Console.WriteLine("Enter a Number to search");
                            int SearchNumber = int.Parse(Console.ReadLine());
                            //If searching list is empty then shows number not available
                            if (OrderedLList[SearchNumber % 11].IsEmpty())
                            {
                                Console.WriteLine("{0} is not available in hash table", SearchNumber);
                                goto Home;
                            }
                            //if available shows it here
                            if (OrderedLList[SearchNumber % 11].Search(SearchNumber))
                            {
                                Console.WriteLine("{0} is available at {1} HashKey",SearchNumber,(SearchNumber % 11));
                            }
                            else
                            {
                                Console.WriteLine("{0} is not available in Hash table",SearchNumber);
                            }
                        }
                        goto Home;
                    case 5:
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Wrong Selection...");
                        goto Home;
                }
            }
            //if any input exceptions and go back to home
            catch (Exception)
            {
                Console.WriteLine("Invalid input...");
                goto Home;
            }
        }
    }
}
