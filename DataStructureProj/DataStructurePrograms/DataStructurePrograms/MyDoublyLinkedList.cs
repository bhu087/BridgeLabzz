//<auto-generated/>
namespace DataStructurePrograms
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    /// <summary>
    /// This is the Generics Doubly linked list utility
    /// </summary>
    /// <typeparam name="T"></typeparam>
    class MyDoublyLinkedList<T>
    {
        //Node for generics Linked list
        NodeDoublyLinkedList<T> head;
        //if head is null and it is true else false
        public bool IsEmpty()
        {
            if (head == null)
            {
                return true;
            }
            return false;
        }
        //Adding to the tail
        public void Add(T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            NodeDoublyLinkedList<T> TempNode = new NodeDoublyLinkedList<T>(Data);
            if (head == null)
            {
                head = TempNode;
                return;
            }
            //if the node.next = null then add the new node
            while (CurrentNode.Next != null)
            {
                CurrentNode = CurrentNode.Next;
            }
            TempNode.Previous = CurrentNode;
            CurrentNode.Next = TempNode;
            TempNode.Next = null;
        }

        //Displaying the list elements
        public void Display()
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            if (IsEmpty())
            {
                return;
            }
            while (CurrentNode.Next != null)
            {
                Console.WriteLine(CurrentNode.Data);
                CurrentNode = CurrentNode.Next;
            }
            Console.WriteLine(CurrentNode.Data);
        }

        //if the data available in list and remove it
        public void Remove(T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            //if first data matches the given data then removes untill current.data != data
RemoveHome: if (CurrentNode.Data.Equals(Data))
            {
                CurrentNode.Previous = null;
                head = CurrentNode.Next;
                CurrentNode = head;
                if (IsEmpty())
                {
                    return;
                }
                
                goto RemoveHome;
            }
            //after this will checks any data availbale in remaining list elements
            while (CurrentNode.Next != null)
            {
                if (CurrentNode.Data.Equals(Data))
                {
                    CurrentNode = CurrentNode.Previous;
                    CurrentNode.Next = CurrentNode.Next.Next;
                }
                CurrentNode = CurrentNode.Next;
            }
            //it checks the final list data
            if (CurrentNode.Data.Equals(Data))
            {
                CurrentNode = CurrentNode.Previous;
                CurrentNode.Next = null;
            }
        }

        //Searching the data present in list or not
        public bool Search(T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            if (IsEmpty())
            {
                return false;
            }
            //if first data matchs and returns present
            if ((CurrentNode.Data).Equals(Data))
            {
                return true;
            }
            //And it checks all the elements till end
            while (CurrentNode.Next != null)
            { 
                if ((CurrentNode.Data).Equals(Data))
                {
                    return true;
                }
                CurrentNode = CurrentNode.Next;
            }
            //Last element is matches then it will send true 
            if ((CurrentNode.Data).Equals(Data))
            {
                return true;
            }
            return false;
        }

        //Size of the linked list
        public int Size()
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            int Count = 0;
            if (IsEmpty())
            {
                return 0;
            }
            while (CurrentNode.Next != null)
            {
                CurrentNode = CurrentNode.Next;
                Count++;
            }
            Count++;
            return Count;
        }
        //if the data present in list then it will delete that else add at end
        public void Append(T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            NodeDoublyLinkedList<T> TempNode = new NodeDoublyLinkedList<T>(Data);
            if (!Search(Data))
            {
                Add(Data);
            }
            else
            {
                Remove(Data);
            }
        }
        //it gives the index of given data
        public int Index(T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            int Count = 0;
            //if list empty and send -1
            if (IsEmpty())
            {
                return -1;
            }
            //this is for 1st element is matches
            if (CurrentNode.Data.Equals(Data))
            {
                return 0;
            }
            //it checks other elements
            while (CurrentNode.Next != null)
            {
                if (CurrentNode.Data.Equals(Data))
                {
                    return Count;
                }
                Count++;
                CurrentNode = CurrentNode.Next; 
            }
            //this is checks at the last data
            if (CurrentNode.Data.Equals(Data))
            {
                return Count;
            }
            return -1;
        }
        //Insert at the given position
        public void Insert(int Position,T Data)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            NodeDoublyLinkedList<T> TempNode = new NodeDoublyLinkedList<T>(Data);
            //if empty return 
            if (IsEmpty())
            {
                return;
            }
            //position is zero then added at front
            if (Position == 0)
            {
                CurrentNode.Previous = TempNode;
                TempNode.Next = CurrentNode;
                head = TempNode;
                return;
            }
            //it will goto till position value and insert here
            if (Position <= Size())
            {
                while (Position>0)
                {
                    CurrentNode = CurrentNode.Next;
                    Position--;
                }
                TempNode.Previous = CurrentNode;
                CurrentNode.Next = TempNode;
            }
        }
        //pop operation
        public T pop()
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            T Ans;
            //if the list empty then send 0
            if (IsEmpty())
            {
                return default;
            }
            //if list contain only one node then head becomes null
            if (CurrentNode.Next == null)
            {
                Ans = CurrentNode.Data;
                head = null;
                return Ans;
            }
            //it will go until end and deletes the node
            while (CurrentNode.Next != null)
            {
                CurrentNode = CurrentNode.Next;
            }
            Ans = CurrentNode.Data;
            CurrentNode = CurrentNode.Previous;
            CurrentNode.Next = null;
            return Ans;
        }
        //pop position
        public T pop(int Position)
        {
            NodeDoublyLinkedList<T> CurrentNode = head;
            T Ans;
            //if the list is empty then send 0
            if (IsEmpty())
            {
                return default;
            }
            //it is at 0th position 
            if (Position == 0)
            {
                Ans = CurrentNode.Data;
                head = CurrentNode.Next;
                return Ans;
            }
            //it reach till end remove the node returns the data
            while (Position > 0)
            {
                CurrentNode = CurrentNode.Next;
                Position--;
            }
            Ans = CurrentNode.Data;
            CurrentNode = CurrentNode.Previous;
            CurrentNode.Next = CurrentNode.Next.Next;
            return Ans;
        }
    }
}
