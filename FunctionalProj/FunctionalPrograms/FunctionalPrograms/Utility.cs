// <auto-generated/>
namespace FunctionalPrograms
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Diagnostics;
    using System.Threading;

    /// <summary>
    /// This is the Utility class for Functional programs
    /// </summary>
    class Utility
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="StringsCount"></param>
        //Anagram Utility
        public void StoringToArray(int StringsCount)
        {
            //This string array for storing strings
            String[] StringArray = new String[StringsCount];
            //this is the duplicate array to show the string while displaying
            String[] TempStringArray = new string[StringsCount];
            //This line asks for entering the StringsCount Arrays
            Console.WriteLine("Enter {0} a string and press enter key after every String", StringsCount);
            //it stores the strings in array
            for (int i = 0; i < StringsCount; i++)
            {
                StringArray[i] = Console.ReadLine();
                TempStringArray[i] = StringArray[i];
            }

            Console.WriteLine("Your Strings Anagrams List below");
            //In this block all the strings are in sorted order
            for (int i = 0; i < StringsCount; i++)
            {
                String TempString = StringArray[i];
                //converting to character array
                char[] CharectorArray = TempString.ToCharArray();
                //sort a char array
                Array.Sort(CharectorArray);
                //store back to string position
                StringArray[i] = new string(CharectorArray);
            }
            //this compares the strimgs and if matches then display the position and anagram values
            for (int i = 0; i < StringsCount - 1; i++)
            {
                for (int j = i + 1; j < StringsCount; j++)
                {
                    if (StringArray[i].Equals(StringArray[j]))
                    {
                        Console.WriteLine("{0}th value {1} have a {2} anagram at {3}th position", i + 1, TempStringArray[i], TempStringArray[j], j + 1);
                    }
                }
            }
        }

        //Integer check if given input is integer it gives the number else
        //it returns -1
        public int IntInput()
        {
            bool Success = Int32.TryParse(Console.ReadLine(), out int Number);
            if (Success)
            {
                return Number;
            }
            else
            {
                Console.WriteLine("you entered non integer value");
                return -1;
            }
        }

        //FlipCoin Utility
        public float FlipCoinUtility(int Value)
        {
            //tails and heads counts are zero initially
            float TailsCount = 0;
            float HeadsCount = 0;
            for (int i = 0; i < Value; i++)
            {
                Random random = new Random();
                //Randomly generate a value between 0.0 to 1.0
                //if random value is below 0.5 it increases tails count else heads
                if ((float)random.Next(10) / 10 > 0.5)
                {
                    TailsCount++;
                }
                else
                {
                    HeadsCount++;
                }
            }
            Console.WriteLine("tails count is " + TailsCount);
            Console.WriteLine("heads count is " + HeadsCount);
            //Heads vs Tails percentage
            float ans = ((HeadsCount / TailsCount) * 100);
            return ans;
        }

        //Leap Year utility
        public bool IsLeapYear(int YearIs)
        {
            //remainder is zero it returns zero but it the yera is multiples of 100
            // and that should satisfy for year % 400 is 0
            if (YearIs % 4 == 0)
            {
                if (YearIs % 100 == 0)
                {
                    if (YearIs % 400 == 0)
                    {
                        return true;
                    }
                    return false;
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        //This is for checking given number is 4 digit or not
        public bool IsFourDigit(int Number)
        {
            if (Number > 999 && Number < 10000)
            {
                return true;
            }
            else
                return false;
        }

        //Hormonic Number Utility
        //Hormonic Number Utility
        public float HormonicUtility(int Num)
        {
            float Ans = 0F;
            float Temp;
            for (int i = 1; i <= Num; i++)
            {
                Temp = i;
                Ans += (1 / Temp);
            }
            return Ans;
        }

        //Utility for Finding Factors
        public void FactrosUtility(int Number)
        {
            int Count = 0;
            //it checks the factors for a give number is any factors available between
            //(2 to Number/2)
            for (int i = 2; i <= Number / 2; i++)
            {
                if (Number % i == 0)
                {
                    Console.WriteLine(i);
                    Count++;
                }
            }
            if (Count == 0)
            {
                Console.WriteLine("No Factors are available for {0}", Number);
            }
        }

        //Two D Array Utility
        public void TwoDArrayUtility(int m, int n)
        {
            //a[][] is a two dimensional array
            int[,] a = new int[m, n];
            //stores the m X n elements
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.WriteLine("Enter " + i + "th row " + j + "th column value");
                    a[i, j] = Int32.Parse(Console.ReadLine());
                }
            }
            //print it Here
            Console.WriteLine("Your 2D array is");
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(a[i, j] + "  ");
                }
                Console.WriteLine();
            }
        }

        //Quadratic Equation Utility
        public void FindRoots(double a, double b, double c)
        {
            double Delta = ((b * b) - (4 * a * c));
            double rePart, imPart;
            double root1, root2;
            if (Delta > 0)
            {       //roots are real and different ex:1,6,5
                root1 = ((-b + Math.Sqrt(Delta)) / (2 * a));
                root2 = ((-b - Math.Sqrt(Delta)) / (2 * a));
                Console.WriteLine("root1 = {0:0.00}, root2 = {1:0.00}", root1, root2);
            }
            if (Delta == 0)
            {   //roots are same ex:1,-2,1
                root1 = ((-b / (2 * a)));
                root2 = root1;
                Console.WriteLine("root1 = {0:0.00}, root2 = {1:0.00}", root1, root2);
            }
            if (Delta < 0)
            {       //roots are imaginary ex:1,-3,10
                rePart = ((-b / (2 * a)));
                imPart = Math.Sqrt(-Delta / (2 * a));
                Console.WriteLine("root1 = {0:0.00}+{1:0.00}i and root2 = {0:0.00}+{1:0.00}i", rePart, imPart, rePart, imPart);
            }
        }

        //Wind Chill Utility program
        public double WindChillUtility(double Temp, double Vel)
        {
            if (!(Temp > 50 || Vel > 120 || Vel < 3))
            {

                double Wind = (35.74 + 0.6215 * Temp + (0.4275 * Temp - 35.75) * Math.Pow(Vel, 0.16));
                return Wind;
            }
            else
                return -1;
        }

        //Tic Tac Toe Play Control
        public void TicTakToeControl()
        {
            Random random = new Random();
            int turns = 9;
            char[] a = new char[9] { '-', '-', '-', '-', '-', '-', '-', '-', '-' };

            //Randomly select who starts first
            if (random.Next(10) > 5)
            {
                ComputerPlaying();
            }
            else
                UserPlaying();

            //Computer playing here with random values
            void ComputerPlaying()
            {
                Console.WriteLine("Enter a position user 1 (0 to 8)");
                goto UserHome;
US1:
                Console.WriteLine("Enter a Correct/Anethor position user 1 (0 to 8)");
UserHome:       try
                {
                    int i = random.Next(10);

                    if (turns > 0)
                    {
                        if (a[i] == '-')
                        {
                            a[i] = 'O';
                            turns--;
                            if (GameCheck('O'))
                            {
                                Console.WriteLine("Computer Wins this match");
                                Displaying();
                                Ending();
                            }
                            Displaying();
                            if (turns > 0)
                            {
                                UserPlaying();
                            }
                            else
                            {
                                Displaying();
                                Console.WriteLine("No one wins");
                                Ending();
                            }
                        }
                        else
                        {
                            goto US1;
                        }
                    }
                }
                catch (Exception)
                {
                    goto US1;
                }
            }
            //User is playing here
            void UserPlaying()
            {
                Console.WriteLine("Enter a position user 2 (0 to 8)");
                goto ComputerHome;
US2:
                Console.WriteLine("Enter a Correct/Anethor position User 2 (0 to 8)");
ComputerHome: try
                {
                    int i = int.Parse(Console.ReadLine());
                    if (turns > 0)
                    {
                        if (a[i] == '-')
                        {
                            a[i] = 'X';
                            turns--;
                            if (GameCheck('X'))
                            {
                                Console.WriteLine("You Win this match");
                                Displaying();
                                Ending();
                            }
                            Displaying();
                            if (turns > 0)
                            {
                                ComputerPlaying();
                            }
                            else
                            {
                                Displaying();
                                Console.WriteLine("No one wins");
                                Ending();
                            }
                        }
                        else
                        {
                            goto US2;
                        }
                    }
                }
                catch (Exception)
                {
                    goto US2;
                }
            }
            //this is the places checking if the game is over it sends true else false
            bool GameCheck(char s)
            {
                if (((a[0] == a[1]) && (a[1] == a[2]) && (a[2] == s)) || (a[3] == a[4]) && (a[4] == a[5]) && (a[5] == s) || (a[6] == a[7]) && (a[7] == a[8]) && (a[8] == s)
                        || (a[0] == a[3]) && (a[3] == a[6]) && (a[6] == s) || (a[1] == a[4]) && (a[4] == a[7]) && (a[7] == s) || (a[2] == a[5]) && (a[5] == a[8]) && (a[8] == s) ||
                        (a[0] == a[4]) && (a[4] == a[8]) && (a[8] == s) || (a[2] == a[4]) && (a[4] == a[6]) && (a[6] == s))
                {
                    return true;
                }
                else
                    return false;
            }
            void Displaying()
            {

                Console.WriteLine("{0} {1} {2}", a[0], a[1], a[2]);
                Console.WriteLine("{0} {1} {2}", a[3], a[4], a[5]);
                Console.WriteLine("{0} {1} {2}", a[6], a[7], a[8]);
            }
            //this is ending of program if u want play again enter 1
            void Ending()
            {
                Console.WriteLine("Thank you for playing\nDo you want to play again press 1 else any Number");
                try
                {
                    if (int.Parse(Console.ReadLine()) == 1)
                    {
                        TicTakToeControl();
                    }
                    else
                    {
                        Environment.Exit(0);
                    }
                }
                catch (Exception)
                {
                    Environment.Exit(0);
                }
            }
        }

        //Gambler BL
        public void GamblerPlaying()
        {
            Console.WriteLine("Enter your Stake");
            int stake = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Enter Your goal");
            int goal = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Enter trails");
            int trails = Int32.Parse(Console.ReadLine());
            GamblerPlay(trails, stake, goal);

        }

        //Gambler Utility program
        public void GamblerPlay(int trails, int stake, int goal)
        {
            int Wins = 0, Bets = 0;
            float Bets1 = 0, Wins1 = 0;
            Random random = new Random();
            //this will plays (trails) number of time
            for (int i = 0; i < trails; i++)
            {
                int Cash = stake;
                //Keep betting till cash > 0 and cash < goal if both the conditions staisfied keep on betting
                //if cash is zero means loss the bets
                //if cash will reachs the goal this considered as a win
                while (Cash > 0 && Cash < goal)
                {
                    Bets++;
                    if (random.Next(10) < 5)
                    {
                        //Console.WriteLine(random.Next(10));
                        Cash++;
                    }
                    else
                        //Console.WriteLine(random.Next(10));
                        Cash--;
                }
                if (Cash >= goal)
                {
                    Wins++;
                    Console.WriteLine("Win at " + i + "th Game");
                }
            }
            Bets1 = Bets;
            Wins1 = Wins;
            Console.WriteLine("Number of Wins " + Wins);
            Console.WriteLine("Number of Bets " + Bets);
            //wins vs bets percentage
            Console.WriteLine("wins percentage " + ((Wins1 / Bets1) * 100));
            Console.WriteLine("loss percentage " + ((Bets1 - Wins1) / Bets1) * 100);

        }

        //Coupon Number Genaration Utility
        public void CouponUtility(int n)
        {
            Random random = new Random();
            int i;
            //char array for different inputs
            char[] CouponElements = "abcd1234ABCDefghIJKLEFGHijkMNOPmnopqrst5678QRSTUVWXYZuvwxyz90".ToCharArray();
            String[] CouponsArray = new String[n];
            //it will generate n number of coupons
            for (i = 0; i < n; i++)
            {
                int value = (int)(random.Next());
                var sb = new StringBuilder();
                while (value > 0)
                {
                    //for random digit selector
                    sb.Append(CouponElements[value % CouponElements.Length]);
                    value /= CouponElements.Length;
                }
                CouponsArray[i] = sb.ToString();
                //checking for duplicates
                for (int j = 0; j < i; j++)
                {
                    //if duplicates break this loop 
                    if (CouponsArray[j].Equals(sb))
                    {
                        i--;
                        break;
                    }
                    //else store the Coupon code in Array
                    CouponsArray[i] = sb.ToString();
                }

            }

            for (int j = 0; j < n; j++)
            {
                //to print coupons
                Console.WriteLine(CouponsArray[j]);
            }
        }

        //Stop watch tility
        public TimeSpan StopWatchUtility()
        {
            TimeSpan totalTime;
            //timer starts from here
            Console.WriteLine("Enter toStart the timer");
            Console.ReadLine();
            DateTime time1 = DateTime.Now;
            //it shows the current time
            Console.WriteLine("You Are started at " + time1.ToString("hh:mm:ss tt"));
            //timer stops here
            Console.WriteLine("Enter to stop the timer");
            Console.ReadLine();
            DateTime time2 = DateTime.Now;
            //it shows the stop time
            Console.WriteLine("You Are stoped at " + time2.ToString("hh:mm:ss tt"));
            //Difference between start and stop time is a total time span
            totalTime = time2 - time1;
            return totalTime;//.ToString();
        }
        //Few Notes Utility
        public int NotesCount(int Amount)
        {
            //initially all the count values are zero and values are assigned at the if blocks
            int Ones = 0, Twos = 0, Fives = 0, Tens = 0, Twenty = 0, Fifty = 0, Hundread = 0, FiveHundread = 0, Thousand = 0;
            int Reminder;
            /*
            Thousand = Amount / 1000;
            Reminder = Amount % 1000;
            Amount = Reminder;

            FiveHundread = Amount / 500;
            Reminder = Amount % 500;
            Amount = Reminder;

            Hundread = Amount / 100;
            Reminder = Amount % 100;
            Amount = Reminder;

            Fifty = Amount / 50;
            Reminder = Amount % 50;
            Amount = Reminder;

            Twenty = Amount / 20;
            Reminder = Amount % 20;
            Amount = Reminder;

            Tens = Amount / 10;
            Reminder = Amount % 10;
            Amount = Reminder;

            Fives = Amount / 5;
            Reminder = Amount % 5;
            Amount = Reminder;

            Twos = Amount / 2;
            Reminder = Amount % 2;
            Amount = Reminder;

            Ones = Amount;
            */

            if (Amount >= 1000)
            {
                Reminder = Amount % 1000;
                Amount /= 1000;
                Thousand += Amount;
                Amount = Reminder;
            }
            if (Amount >= 500)
            {
                Reminder = Amount % 500;
                Amount /= 500;
                FiveHundread += Amount;
                Amount = Reminder;
            }
            if (Amount >= 100)
            {
                Reminder = Amount % 100;
                Amount /= 100;
                Hundread += Amount;
                Amount = Reminder;
            }
            if (Amount >= 50)
            {
                Reminder = Amount % 50;
                Amount /= 50;
                Fifty += Amount;
                Amount = Reminder;
            }
            if (Amount >= 20)
            {
                Reminder = Amount % 20;
                Amount /= 20;
                Twenty += Amount;
                Amount = Reminder;
            }
            if (Amount >= 10)
            {
                Reminder = Amount % 10;
                Amount /= 10;
                Tens += Amount;
                Amount = Reminder;
            }
            if (Amount >= 5)
            {
                Reminder = Amount % 5;
                Amount /= 5;
                Fives += Amount;
                Amount = Reminder;
            }
            if (Amount >= 2)
            {
                Reminder = Amount % 2;
                Amount /= 2;
                Twos += Amount;
                Amount = Reminder;
            }
            Ones += Amount;
            //this display the indivisual notes count
            Console.WriteLine("Thousand Count       {0}", Thousand);
            Console.WriteLine("FiveHundread Count   {0}", FiveHundread);
            Console.WriteLine("Hundread Count       {0}", Hundread);
            Console.WriteLine("Fifty Count          {0}", Fifty);
            Console.WriteLine("Twenty Count         {0}", Twenty);
            Console.WriteLine("Tens Count           {0}", Tens);
            Console.WriteLine("Fives Count          {0}", Fives);
            Console.WriteLine("Twos Count           {0}", Twos);
            Console.WriteLine("Ones Count           {0}", Ones);
            //return total number of notes count
            return Thousand + FiveHundread + Hundread + Fifty + Twenty + Tens + Fives + Twos + Ones;
        }
        //Day of the week Finder utility
        public string DayOfTheWeekUtility(int Day, int Month, int Year)
        {
            string[] WeekArray = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
            string[] MonthArray = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
            int d0 = 0;
            int m0 = 0;

            int y0 = Year - (14 - Month) / 12;
            int a = y0 + y0 / 4 - y0 / 100 + y0 / 400;
            m0 = (Month + 12 * ((14 - Month) / 12) - 2);
            d0 = (Day + a + 31 * m0 / 12) % 7;
            string Str = MonthArray[m0+1]+" "+WeekArray[d0];
            return Str; 
        }

        //Temperature conversion utility program
        public void TemperatureConversionUtility(int TempSelect, double TempValue)
        {
            double ConvertedTemperature = 0;
            //if select a 0 it will convert fahrenheit value to celcius
            if (TempSelect == 0)
            {
                ConvertedTemperature = ((TempValue - 32) * 5 / 9);
                Console.WriteLine(TempValue + " Fahrenheit = {0} celcius", ConvertedTemperature);
            }
            //if select a 0 it will convert celcius value to fahrenheit
            if (TempSelect == 1)
            {
                ConvertedTemperature = (TempValue * 9 / 5) + 32;
                Console.WriteLine(TempValue + " celcius = {0} Fahrenheit", ConvertedTemperature);
            }
        }
        //Monthly payment utility program 
        public double PaymentCalculator(long PrinciAmount, int Years, float Rate)
        {
            int n = 12 * Years;
            //if rate is zero then monthly payment is principal amount by years and 12
            if (Rate == 0)
            {
                return PrinciAmount / (Years * 12);
            }
            //else rate will b calculated by this formula
            double r = Rate / (12 * 100);
            double pay = (PrinciAmount * r) / (1 - Math.Pow(1 + r, -n));
            return pay;
        }

        //This is the utility program for Binary places
            static long BinaryResult = 0;
            static string PositionString;// = string.Empty;
         public static void toBinary(int DeciNumber)
         {
             long TempNumber = 0;
             int Remainder = 0;
             int Power = 0;
             int PositionValue = 0;
             while (DeciNumber > 0)
             {
                //to find binary representation
                Remainder = DeciNumber % 2;
                BinaryResult = (long)(BinaryResult + Remainder * Math.Pow(10, Power));
                Power++;
                DeciNumber = DeciNumber / 2;
             }
                TempNumber = BinaryResult;
                Power = 0;
             while (TempNumber / 10 > 0)
             {  
                //to find 2^pos value
                if (TempNumber % 10 == 1)
                {
                    //position value is appending to string
                    PositionValue = (int)Math.Pow(2, Power);
                    PositionString += PositionValue.ToString() + "+";
                }
                Power++;
                TempNumber = TempNumber / 10;
             }
                PositionValue = (int)Math.Pow(2, Power);
                PositionString += PositionValue.ToString();
         }
        //This is for calling binary places result
        public string PositionDeciValue(int DeciNum)
        {
            BinaryResult = 0;
            PositionString = string.Empty;
            toBinary(DeciNum);
            return PositionString;
        }
        //This is for Binary representation result
        public long PositionBinary(int DeciNum)
        {
            BinaryResult = 0;
            PositionString = string.Empty;
            toBinary(DeciNum);
            return BinaryResult;
        }
        //Nibble Swapping Utility
        public int NibbleSwapping(int DeciValue)
        {
            int NibbleSwap = ((DeciValue & 0x0F) << 4 | (DeciValue & 0xF0) >> 4);
            return NibbleSwap;
        }
        /// <summary>
        /// Sums the of zero.
        /// </summary>
        public void SumOfZeroUtility(int[] array, int length)
        {
            int count = 0;
            //// if length is zero then count length is 1 only
            if (length == 3)
            {
                length = 1;
                int sum = array[0] + array[1] + array[2];
                if (sum == 0)
                {
                    count++;
                }
                Console.WriteLine("Sum of zero Count is " + count);
                return;
            }
            ////else the number of iterations are length times
            for (int i = 0; i < length; i++)
            {
                int sum = array[i % length] + array[(i + 1) % length] + array[(i + 2) % length];
                if (sum == 0)
                {
                    count++;
                }
            }
            Console.WriteLine("Sum of zero Count is " + count);
        }
    }
}

